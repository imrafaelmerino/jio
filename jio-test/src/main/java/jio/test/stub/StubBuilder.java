package jio.test.stub;

import static java.util.Objects.requireNonNull;

import fun.gen.Gen;
import java.time.Duration;
import java.util.function.Supplier;
import jio.IO;
import jio.Result;
import jio.Result.Success;

/**
 * A builder for building `IO` stubs instances using generators of IO effects. class, where delays and failures can be
 * produced based on the call number to the generator. Generators are composable using the `Combinators` class.
 * <p>
 * Example of generating `IO` instances with generators and composition:
 * <pre>
 * {@code
 * var gen1 = Gen.seq(IO::succeed);
 * var gen2 = Gen.cons(IO.fail(new RuntimeException("bad luck!")));
 * var gen = Combinators.oneOf(gen1, gen2);
 * }
 * </pre>
 *
 * @param <Generated> The type of output generated by the stub.
 * @see Gen
 * @see fun.gen.Combinators
 */
public final class StubBuilder<Generated> implements Supplier<IO<Generated>> {

  private final Gen<Result<Generated>> gen;
  private Gen<Duration> delayGen;

  private StubBuilder(final Gen<Result<Generated>> gen) {
    this.gen = gen;
  }

  /**
   * Creates a new stub using the provided generator of IO effects.
   *
   * @param gen         The generator for creating `IO` instances.
   * @param <Generated> The type of output to generate.
   * @return A new stub instance.
   */
  public static <Generated> StubBuilder<Generated> ofGen(final Gen<Result<Generated>> gen) {
    return new StubBuilder<>(requireNonNull(gen));
  }

  /**
   * Creates a new stub using the provided generator of values.
   *
   * @param gen         The generator for creating values of type O
   * @param <Generated> The type of output to generate.
   * @return A new stub instance.
   */
  public static <Generated> StubBuilder<Generated> ofSucGen(final Gen<Generated> gen) {
    return new StubBuilder<>(requireNonNull(gen).map(Success::new));
  }

  /**
   * Sets the generator of delays
   *
   * @param delaysGen the generator of delays
   * @return this stub builder with a delay generator
   */
  public StubBuilder<Generated> withDelays(final Gen<Duration> delaysGen) {
    this.delayGen = requireNonNull(delaysGen);
    return this;
  }

  /**
   * Generates an `IO` stub using the specified generator and settings.
   *
   * @return The generated `IO` stub instance.
   */

  @Override
  public IO<Generated> get() {
    if (delayGen != null) {
      return IO.lazy(delayGen.sample())
               .then(dur -> {
                 try {
                   Thread.sleep(dur.toMillis());
                 } catch (InterruptedException e) {
                   Thread.currentThread()
                         .interrupt();
                 }
                 return IO.lazy(gen.sample());
               })
               .then(it -> switch (it) {
                 case Success<Generated>(Generated val) -> IO.succeed(val);
                 case jio.Result.Failure<Generated>(Exception e) -> IO.fail(e);
               });
    }
    return IO.lazy(gen.sample())
             .then(it -> switch (it) {
                     case Success<Generated>(Generated val) -> IO.succeed(val);
                     case jio.Result.Failure<Generated>(Exception e) -> IO.fail(e);
                   }
                  );
  }
}
